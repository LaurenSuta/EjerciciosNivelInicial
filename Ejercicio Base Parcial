public class Vehiculo {

    private String placa;
    private String marca;
    private double precio;
    private int cilindraje;
    private double impuestoCirculacion;
    private static final double cuotaMesGarage = 100;
    
    //Constructor
    public Vehiculo(String marca, double precio, int cilindrada) {
        this.matricula = null; //Se inicializa con null 
        this.marca = marca;
        this.precio = precio;
        this.cilindrada = cilindrada;
        this.impuestoCirculacion = calcularImpuestoCirculacion();
    }

    public String getPlaca() {
        return placa;
    }

    public String getMarca() {
        return marca;
    }

    public double getPrecio() {
        return precio;
    }

    public int getCilindraje() {
        return cilindraje;
    }

    public double getImpuestoCirculacion() {
        return impuestoCirculacion;
    }

    public double getCuotaMesGaraje() {
        return cuotaMesGaraje;
    }

    public void setPlaca(String placa) {
        this.placa = placa;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }

    public void setPrecio(double precio) {
        this.precio = precio;
    }

    public void setCilindraje(int cilindraje) {
        this.cilindraje = cilindraje;
    }

    public void setImpuestoCirculacion(double impuestoCirculacion) {
        this.impuestoCirculacion = impuestoCirculacion;
    }

    public void setCuotaMesGaraje(double cuotaMesGaraje) {
        this.cuotaMesGaraje = cuotaMesGaraje;
    }
    
    public void setCuotaMesGaraje (double CuotaMesGaraje) {
        if (CuotaMesGaraje >= 0){
        this.CuotaMesGaraje = CuotaMesGaraje;
        } else {
            System.out.println ("La cuota mensual de garaje no puede ser negativa");
        }
    }
}   
    private double calcularImpuestoCirculacion() {
        return precio * 0.02;
    }
    public boolean matricular(String matricula) {
        if (matricula.length() == 6) {
            this.placa = matricula;
            return true;
        } else {
            return false;
        }
}
public class Moto extends Vehiculo {
    
  private boolean tieneSidecar;
  
 public Moto(String marca, double precio, int cilindraje, boolean tieneSidecar) {
 
        super(marca, precio, cilindraje);
        this.tieneSidecar = tieneSidecar;
        ajustarCuotaYImpuesto();
 }
    private void ajustarCuotaYImpuesto {
    if (tiene SideCar){
        double nuevaCuotaGaraje = this.getCuotaMesGaraje() * 1.5; 
        this.setCuotaMesGaraje(nuevaCuotaGaraje);
        
        double nuevoImpuesto = this.getImpuestoCirculacion() + (this.getPrecio() * 0.1);
            this.setImpuestoCirculacion(nuevoImpuesto);
    }  
}
public class Auto extends Vehiculo {
    private boolean tieneRadio;
    private boolean tieneNavegador;
    
    public Auto(String marca, double precio, int cilindraje, boolean tieneRadio, boolean tieneNavegador) {
        super(marca, precio, cilindraje);
        this.tieneRadio = tieneRadio;
        this.tieneNavegador = tieneNavegador;
        ajustarCuotaYImpuesto();
        
        //Metodo para ajustar la cuota de garaje e impuesto de circulacion 
        private void ajustarCuotaYImpuesto() {
            
            if (this.getCilindraje() > 2499) {
            double nuevaCuotaGaraje = this.getCuotaMesGaraje() * 1.2;
            this.setCuotaMesGaraje(nuevaCuotaGaraje);
        }
    if (tieneRadio) {
            double nuevoImpuesto = this.getImpuestoCirculacion() + (this.getPrecio() * 0.01);
            this.setImpuestoCirculacion(nuevoImpuesto);
        }
    if (tieneNavegador) 
            double nuevoImpuesto = this.getImpuestoCirculacion () + (this.getPrecio() * 0.02);
            this.serImpuestoCirculacion (nuevo)
    }
        
        if (this.getCilindraje() > 2499) {
            double nuevaCuotaGaraje = this.getCuotaMesGaraje() * 1.2;
            this.setCuotaMesGaraje(nuevaCuotaGaraje);
        }
    if (tieneRadio) {
            double nuevoImpuesto = this.getImpuestoCirculacion() + (this.getPrecio() * 0.01);
            this.setImpuestoCirculacion(nuevoImpuesto);
        }
    if (tieneNavegador) 
            double nuevoImpuesto = this.getImpuestoCirculacion () + (this.getPrecio() * 0.02);
            this.serImpuestoCirculacion (nuevoImpuesto);
    }
}
public class Garaje {
 public class Garaje implements iGarage {
    private static final int numEspacios = 20; 
    private Vehiculo[] espacios;   
    
    //Constructor de la clase Garaje
    public Garaje() {
        this.espacios = new Vehiculo[numEspacios];
        
        public void agregarVehiculo(Vehiculo vehiculo, int espacio) {
        if (espacio >= 0 && espacio < numEspacios) {
            espacios[espacio] = vehiculo;
        } else {
            System.out.println("Espacio de garaje no válido.");
        }
    }
        
         public double calcularIngresos() {
        double ingresosTotales = 0;
        for (Vehiculo vehiculo : espacios) {
            if (vehiculo != null) {
                ingresosTotales += vehiculo.getCuotaMesGaraje();
            }
        }
        return ingresosTotales;
    }
     public int calcularOcupacionPorTipoVehiculo(Vehiculo vehiculo) {
        int cantidad = 0;
        for (Vehiculo v : espacios) {
            if (v != null && v.getClass().equals(vehiculo.getClass())) {
                cantidad++;
            }
        }
        return cantidad;
    }
}
import java.util.Scanner;

public class MenuGaraje {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Garaje garaje = new Garaje();
        boolean salir = false;
    
    while (!salir) {
            System.out.println("Menú de Gestión del Garaje:");
            System.out.println("1.- Alquilar un espacio");
            System.out.println("2.- Retirar vehículo");
            System.out.println("3.- Consulta de ingresos mensuales");
            System.out.println("4.- Consulta proporción autos / motos");
            System.out.println("5.- Listado de matrículas y cuota mensual y tipo vehículo");
            System.out.println("6.- Salir");
            System.out.print("Seleccione una opción: ");
            int opcion = scanner.nextInt();
            
             switch (opcion) {
                case 1:
             //Para alquila un espacio
                    break;
                case 2:
             //Para retirar un vehículo
                    break;
                case 3:
             //Para consultar ingresos mensuales
                    break;
                case 4:
             //Para consultar proporción autos / motos
                    break;
                case 5:
             //Para listar matrículas y cuota mensual y tipo de vehículo
                    break;
                case 6:
                    salir = true;
                    System.out.println("Saliendo del programa...");
                    break;
                default:
                    System.out.println("Opción no válida. Por favor, seleccione una opción del 1 al 6.");
                    break;
            }
        }
        scanner.close();
    }
}
private static void alquilarEspacio(Garaje garaje, Scanner scanner) {
        System.out.print("Introduce la marca del vehículo: ");
        String marca = scanner.next();

        System.out.print("Introduce el precio del vehículo: ");
        double precio = scanner.nextDouble();

        System.out.print("Introduce el cilindraje del vehículo: ");
        int cilindraje = scanner.nextInt();

        System.out.print("¿Tiene matrícula? (true/false): ");
        boolean tieneMatricula = scanner.nextBoolean();

        if (!tieneMatricula) {
            System.out.println("No se puede alquilar un vehículo sin matrícula.");
            return;
        }
//Comprobar si supera el limite de ocupacion por motos
        if (garaje.calcularProporcionMotos() >= 0.8) {
            System.out.println("Se supera el límite de ocupación por motos en el garaje.");
            return;
        }

        // Se alquila el espacio en el garaje
        Vehiculo vehiculo = new Vehiculo(marca, precio, cilindraje);
        garaje.agregarVehiculo(vehiculo);
        System.out.println("Vehículo alquilado correctamente.");
    }
}
